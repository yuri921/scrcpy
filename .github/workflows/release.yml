name: Build-Windows-Only

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Version name (default is ref name)'

env:
  # $VERSION is used by release scripts
  VERSION: ${{ github.event.inputs.name || github.ref_name }}

jobs:
  # ------------------------------
  # 仅保留：scrcpy-server 编译（Windows 客户端依赖）
  # ------------------------------
  build-scrcpy-server:
    runs-on: ubuntu-latest  # 用 Ubuntu 编译 server 更高效，不影响 Windows 产物
    env:
      GRADLE: gradle  # 使用原生 gradle 而非 ./gradlew
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK（编译 server 依赖）
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: 编译 scrcpy-server
        run: release/build_server.sh

      - name: 上传 server 产物（供 Windows 打包使用）
        uses: actions/upload-artifact@v4
        with:
          name: scrcpy-server
          path: release/work/build-server/server/scrcpy-server

  # ------------------------------
  # Windows x86（32位）编译与打包
  # ------------------------------
  build-win32:
    runs-on: ubuntu-latest  # 通过 mingw-w64 交叉编译 Windows 产物
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: 安装 Windows 交叉编译依赖
        run: |
          sudo apt update
          sudo apt install -y meson ninja-build nasm ffmpeg libsdl2-2.0-0 \
             libsdl2-dev libavcodec-dev libavdevice-dev libavformat-dev \
             libavutil-dev libswresample-dev libusb-1.0-0 libusb-1.0-0-dev \
             mingw-w64 mingw-w64-tools libz-mingw-w64-dev  # mingw 是 Windows 交叉编译核心

      - name: 编译 Windows 32位客户端
        run: release/build_windows.sh 32

      # 压缩产物以保留权限（upload-artifact 不默认保留权限）
      - name: 打包编译产物
        run: |
            cd release/work/build-win32
            mkdir dist-tar
            cd dist-tar
            tar -C .. -cvf dist.tar.gz dist/

      - name: 上传 Windows 32位编译中间产物
        uses: actions/upload-artifact@v4
        with:
          name: build-win32-intermediate
          path: release/work/build-win32/dist-tar/

  package-win32:
    needs:
      - build-scrcpy-server  # 依赖 server 产物
      - build-win32          # 依赖 32位客户端编译产物
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: 下载 scrcpy-server（用于打包进客户端）
        uses: actions/download-artifact@v4
        with:
          name: scrcpy-server
          path: release/work/build-server/server/

      - name: 下载 Windows 32位编译产物
        uses: actions/download-artifact@v4
        with:
          name: build-win32-intermediate
          path: release/work/build-win32/dist-tar/

      # 解压中间产物（恢复编译后的文件结构）
      - name: 解压产物
        run: |
            cd release/work/build-win32
            tar xf dist-tar/dist.tar.gz

      - name: 打包 Windows 32位最终产物（zip 格式）
        run: release/package_client.sh win32 zip

      - name: 上传 Windows 32位发布产物
        uses: actions/upload-artifact@v4
        with:
          name: release-win32
          path: release/output/

  # ------------------------------
  # Windows x64（64位）编译与打包
  # ------------------------------
  build-win64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: 安装 Windows 交叉编译依赖（与 32位共用依赖）
        run: |
          sudo apt update
          sudo apt install -y meson ninja-build nasm ffmpeg libsdl2-2.0-0 \
             libsdl2-dev libavcodec-dev libavdevice-dev libavformat-dev \
             libavutil-dev libswresample-dev libusb-1.0-0 libusb-1.0-0-dev \
             mingw-w64 mingw-w64-tools libz-mingw-w64-dev

      - name: 编译 Windows 64位客户端
        run: release/build_windows.sh 64

      # 压缩产物以保留权限
      - name: 打包编译产物
        run: |
            cd release/work/build-win64
            mkdir dist-tar
            cd dist-tar
            tar -C .. -cvf dist.tar.gz dist/

      - name: 上传 Windows 64位编译中间产物
        uses: actions/upload-artifact@v4
        with:
          name: build-win64-intermediate
          path: release/work/build-win64/dist-tar/

  package-win64:
    needs:
      - build-scrcpy-server  # 依赖 server 产物
      - build-win64          # 依赖 64位客户端编译产物
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: 下载 scrcpy-server（用于打包进客户端）
        uses: actions/download-artifact@v4
        with:
          name: scrcpy-server
          path: release/work/build-server/server/

      - name: 下载 Windows 64位编译产物
        uses: actions/download-artifact@v4
        with:
          name: build-win64-intermediate
          path: release/work/build-win64/dist-tar/

      # 解压中间产物
      - name: 解压产物
        run: |
            cd release/work/build-win64
            tar xf dist-tar/dist.tar.gz

      - name: 打包 Windows 64位最终产物（zip 格式）
        run: release/package_client.sh win64 zip

      - name: 上传 Windows 64位发布产物
        uses: actions/upload-artifact@v4
        with:
          name: release-win64
          path: release/output

  # ------------------------------
  # Windows 专属发布流程（汇总 32/64位产物 + server）
  # ------------------------------
  release-windows-only:
    needs:
      - build-scrcpy-server
      - package-win32
      - package-win64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: 下载 scrcpy-server（用于单独打包 server）
        uses: actions/download-artifact@v4
        with:
          name: scrcpy-server
          path: release/work/build-server/server/

      - name: 下载 Windows 32位发布产物
        uses: actions/download-artifact@v4
        with:
          name: release-win32
          path: release/output/

      - name: 下载 Windows 64位发布产物
        uses: actions/download-artifact@v4
        with:
          name: release-win64
          path: release/output/

      - name: 单独打包 scrcpy-server（供 Windows 用户使用）
        run: release/package_server.sh

      - name: 生成所有产物的校验文件（确保完整性）
        run: release/generate_checksums.sh

      - name: 上传 Windows 最终发布包（含 32/64位 + server + 校验文件）
        uses: actions/upload-artifact@v4
        with:
          name: scrcpy-windows-release-${{ env.VERSION }}
          path: release/output
